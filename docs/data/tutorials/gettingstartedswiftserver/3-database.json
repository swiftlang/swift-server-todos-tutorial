{"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"url":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/3-database","interfaceLanguage":"swift"},"sections":[{"content":[{"inlineContent":[{"text":"Use the Fluent ORM to connect a PostgreSQL database to the tutorial app.","type":"text"}],"type":"paragraph"}],"kind":"hero","title":"Integrate a database","chapter":"Build a basic Vapor app","estimatedTimeInMinutes":10},{"kind":"tasks","tasks":[{"anchor":"Set-up-the-infrastructure","stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Run"}]},{"text":" ","type":"text"},{"code":"% docker compose up postgres","type":"codeVoice"}]}],"runtimePreview":null,"media":null,"code":"3-bash.0.txt","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Open a new terminal and run docker compose to start a Postgres server."}]}],"type":"step"}],"title":"Set up the infrastructure","contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"inlineContent":[{"text":"Set up the app dependencies.","type":"text"}],"type":"paragraph"}]}]},{"anchor":"Configure-the-database-tables-and-connection","stepsSection":[{"runtimePreview":null,"type":"step","code":"3-package.0.swift","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Open "},{"type":"codeVoice","code":"Package.swift"},{"text":" to add the Fluent dependencies to the target.","type":"text"}]}],"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Add","type":"text"}]},{"text":" the Fluent dependencies","type":"text"}]}],"media":null},{"code":"3-database.0.swift","caption":[{"type":"paragraph","inlineContent":[{"text":"Change ","type":"text"},{"code":"TODO","type":"codeVoice"},{"type":"text","text":" to a class that will represent a database table.  "},{"inlineContent":[{"type":"text","text":"Note:"}],"type":"strong"},{"text":" The class is nested in the parent type ","type":"text"},{"type":"codeVoice","code":"DB"},{"type":"text","text":" to provide a namespace for the class."}]}],"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Edit"}],"type":"strong"},{"text":" ","type":"text"},{"code":"Database.swift","type":"codeVoice"}]}],"media":null,"type":"step"},{"media":null,"runtimePreview":null,"code":"3-database.1.swift","type":"step","caption":[{"inlineContent":[{"type":"text","text":"This enables the class to benefit from default implementations of common database operations."}],"type":"paragraph"}],"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Edit","type":"text"}],"type":"strong"},{"text":" the class to conform to a Fluent ","type":"text"},{"code":"Model","type":"codeVoice"},{"text":".","type":"text"}]}]},{"media":null,"type":"step","content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Add"}]},{"type":"text","text":" the "},{"type":"codeVoice","code":"schema"},{"text":" property, define an ","type":"text"},{"code":"ID","type":"codeVoice"},{"text":", to satisfy the ","type":"text"},{"code":"Model","type":"codeVoice"},{"type":"text","text":" protocol."}],"type":"paragraph"}],"runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"ID","type":"codeVoice"},{"type":"text","text":" serves as the primary key of the database, "},{"type":"codeVoice","code":"Field"},{"type":"text","text":" identifies a column of type string called contents."}]}],"code":"3-database.2.swift"},{"runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add CreateTODOs, conforming to "},{"code":"AsyncMigration","type":"codeVoice"},{"type":"text","text":" with stubs to provide the migration to create a table."}]}],"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Create"}],"type":"strong"},{"type":"text","text":" a "},{"type":"codeVoice","code":"Migrations"},{"text":" enum for a namespace","type":"text"}]}],"type":"step","code":"3-database.3.swift","media":null},{"caption":[{"inlineContent":[{"type":"codeVoice","code":"database.schema(_)"},{"type":"text","text":" and "},{"code":"field(_)","type":"codeVoice"},{"type":"text","text":" to reference the table, while the "},{"code":"create()","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"delete()"},{"type":"text","text":" methods do the bulk of the work."}],"type":"paragraph"}],"runtimePreview":null,"code":"3-database.4.swift","type":"step","media":null,"content":[{"inlineContent":[{"inlineContent":[{"text":"Implement","type":"text"}],"type":"strong"},{"type":"text","text":" the migrations."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Create","type":"text"}],"type":"strong"},{"type":"text","text":" a "},{"type":"codeVoice","code":"configureDatabase"},{"type":"text","text":" function"}],"type":"paragraph"}],"media":null,"code":"3-database.5.swift","runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The function will configure the connection to the databse and run the migrations."}]}],"type":"step"},{"type":"step","media":null,"code":"3-database.6.swift","runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"text":"Choose the URL by either reading it from the environment or defaulting to something that would work in most development setups.","type":"text"}]}],"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Define"}]},{"type":"text","text":" a URL that provides the connection to the database."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Configure"}]},{"type":"text","text":" the function to run the database migrations"}]}],"media":null,"code":"3-database.7.swift","caption":[{"inlineContent":[{"text":"The database migrations will create the table.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"type":"step"},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Add","type":"text"}]},{"text":" a call to ","type":"text"},{"type":"codeVoice","code":"configureDatabase(app: app)"}]}],"caption":[{"inlineContent":[{"text":"Calling ","type":"text"},{"code":"configureDatabase","type":"codeVoice"},{"type":"text","text":" with a reference to "},{"code":"app","type":"codeVoice"},{"type":"text","text":" will connect to the database using the URL and run the migrations before the app initializes the server."}],"type":"paragraph"}],"media":null,"type":"step","code":"3-entrypoint.1.swift","runtimePreview":null}],"contentSection":[{"mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"text":"Create tables with Fluent in code as a Model and then use Migrations in the database. You configure the database connection and learn where to run the migrations for the app.","type":"text"}]}],"kind":"contentAndMedia"}],"title":"Configure the database tables and connection"},{"stepsSection":[{"runtimePreview":null,"caption":[{"inlineContent":[{"text":"Add a ","type":"text"},{"code":"DB","type":"codeVoice"},{"type":"text","text":" property, and add imports for "},{"code":"Fluent","type":"codeVoice"},{"type":"text","text":" and "},{"code":"HTTPTypes","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"type":"step","content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Edit","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"code":"APIHandler.swift","type":"codeVoice"}]}],"media":null,"code":"3-apihandler.0.swift"},{"code":"3-apihandler.1.swift","runtimePreview":null,"media":null,"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Review"}],"type":"strong"},{"type":"text","text":" the idea for creating a new TODO."}],"type":"paragraph"}],"type":"step","caption":[{"inlineContent":[{"type":"text","text":"As part of the OpenAPI generated types, we have the stubs of the methods we need to implement for our routes. In the previous chapter, we had returned a 500 status code for the create todo route."}],"type":"paragraph"}]},{"media":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"DB.TODO()"},{"type":"text","text":" method to Instantiate a new TODO object from the database."}]}],"code":"3-apihandler.2.swift","runtimePreview":null,"type":"step","content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Implement"}],"type":"strong"},{"type":"text","text":" the code to read from the postgres database."}],"type":"paragraph"}]},{"code":"3-apihandler.3.swift","media":null,"caption":[{"inlineContent":[{"type":"text","text":"Review the commented code to evalute the idea for listing all of the TODOs from the database."}],"type":"paragraph"}],"type":"step","content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Review","type":"text"}],"type":"strong"},{"type":"text","text":" the idea for listing all the available TODOs."}]}],"runtimePreview":null},{"code":"3-apihandler.4.swift","runtimePreview":null,"caption":[{"inlineContent":[{"text":"Fetch TODOs from the database and store them in an array using the code on the right.","type":"text"}],"type":"paragraph"}],"media":null,"type":"step","content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Implement"}]},{"text":" fetching and returning the TODOs from the database.","type":"text"}],"type":"paragraph"}]},{"caption":[{"inlineContent":[{"type":"text","text":"Add the database as a parameter to "},{"type":"codeVoice","code":"APIHandler"},{"type":"text","text":"."}],"type":"paragraph"}],"type":"step","media":null,"code":"3-serverservice.1.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Edit"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"ServerService.swift"},{"text":".","type":"text"}]}]}],"title":"Add the database layer to the routes","anchor":"Add-the-database-layer-to-the-routes","contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"text":"Build on the OpenAPI stubs built in a previous section to add persistence to your OpenAPI routes.","type":"text"}]}]}]},{"title":"Run and test the code","anchor":"Run-and-test-the-code","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"inlineContent":[{"text":"Using a terminal, run the updated Vapor app and try it out!","type":"text"}],"type":"paragraph"}]}],"stepsSection":[{"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To test your work, run the commands on the right in 2 separate terminals."},{"text":" ","type":"text"},{"text":"In this first terminal, run the server.","type":"text"}]}],"runtimePreview":null,"type":"step","media":null,"code":"3-bash-swiftrun.0.txt","content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Run","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"% swift run SwiftServerTodos"}]}]},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Run"}]},{"text":" ","type":"text"},{"code":"% curl -i -X POST \\ -H \"Content-Type: application\/json\" \\ -d '{ \"contents\": \"my first todo\" }' \\ localhost:8080\/api\/todos","type":"codeVoice"}]}],"type":"step","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In a second terminal, run a "},{"code":"curl","type":"codeVoice"},{"text":" HTTP ","type":"text"},{"type":"codeVoice","code":"POST"},{"text":" request to create a TODO.","type":"text"}]}],"code":"3-bash-curl.0.txt","runtimePreview":null},{"caption":[{"inlineContent":[{"type":"text","text":"The output includes "},{"code":"HTTP\/1.1 201 Created","type":"codeVoice"},{"text":" and shows the new TODO created.","type":"text"}],"type":"paragraph"}],"code":"3-bash-curl.1.txt","type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Review"}]},{"text":" the output in the second terminal.","type":"text"}]}],"media":null,"runtimePreview":null},{"media":null,"code":"3-bash-curl.2.txt","type":"step","content":[{"inlineContent":[{"inlineContent":[{"text":"Run","type":"text"}],"type":"strong"},{"type":"text","text":" "},{"code":"% curl localhost:8080\/api\/todos","type":"codeVoice"}],"type":"paragraph"}],"runtimePreview":null,"caption":[{"inlineContent":[{"type":"text","text":"After creating the new TODO, make a "},{"code":"GET","type":"codeVoice"},{"type":"text","text":" request to retrieve all the TODOs."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Review","type":"text"}],"type":"strong"},{"text":" the output","type":"text"}]}],"media":null,"type":"step","caption":[{"inlineContent":[{"text":"You should see the todo you created earlier.","type":"text"}],"type":"paragraph"}],"code":"3-bash-curl.3.txt","runtimePreview":null}]}]},{"featuredEyebrow":"Article","title":"Review and where to go next","abstract":[{"type":"text","text":"Review what you built and where to find resources to build something you can ship to production."}],"kind":"callToAction","action":{"overridingTitle":"Read article","identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/4-wrapup","overridingTitleInlineContent":[{"text":"Read article","type":"text"}],"type":"reference","isActive":true}}],"variants":[{"paths":["\/tutorials\/gettingstartedswiftserver\/3-database"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"project","hierarchy":{"modules":[{"projects":[{"reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/0-setup","sections":[{"kind":"task","reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/0-setup#Verify-installed-tools"},{"kind":"task","reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/0-setup#Clone-and-build-the-tutorial-repository"}]}],"reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/getting-started-swift-server\/Before-you-begin"},{"projects":[{"reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/1-introduction","sections":[{"reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/1-introduction#Explore-the-parts-of-a-basic-app","kind":"task"}]},{"sections":[{"kind":"task","reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/2-openapi#Add-an-OpenAPI-document"},{"kind":"task","reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/2-openapi#OpenAPI-generator"},{"reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/2-openapi#Configure-Vapor-to-use-the-API-handler","kind":"task"}],"reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/2-openapi"},{"sections":[{"kind":"task","reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/3-database#Set-up-the-infrastructure"},{"kind":"task","reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/3-database#Configure-the-database-tables-and-connection"},{"reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/3-database#Add-the-database-layer-to-the-routes","kind":"task"},{"reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/3-database#Run-and-test-the-code","kind":"task"}],"reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/3-database"}],"reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/getting-started-swift-server\/Build-a-basic-Vapor-app"},{"projects":[{"sections":[{"kind":"heading","reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/4-wrapup#Summary"},{"reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/4-wrapup#Review","kind":"heading"},{"reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/4-wrapup#Where-do-I-go-from-here","kind":"heading"}],"reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/4-wrapup"}],"reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/getting-started-swift-server\/Review-and-next-steps"}],"paths":[["doc:\/\/com.apple.ASE.getting-started\/tutorials\/getting-started-swift-server","doc:\/\/com.apple.ASE.getting-started\/tutorials\/getting-started-swift-server\/$volume","doc:\/\/com.apple.ASE.getting-started\/tutorials\/getting-started-swift-server\/Build-a-basic-Vapor-app"]],"reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/getting-started-swift-server"},"metadata":{"role":"project","category":"Get Started with Swift Server","categoryPathComponent":"getting-started-swift-server","title":"Integrate a database"},"references":{"doc://com.apple.ASE.getting-started/tutorials/GettingStartedSwiftServer/2-openapi":{"type":"topic","abstract":[{"text":"Learn how to add an OpenAPI document, generate server stubs using the OpenAPI plugin, and integrate the generated code into the app.","type":"text"}],"identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/2-openapi","url":"\/tutorials\/gettingstartedswiftserver\/2-openapi","kind":"project","estimatedTime":"10min","title":"Specify routes using OpenAPI","role":"project"},"3-apihandler.0.swift":{"fileType":"swift","content":["import Fluent","import HTTPTypes","import Foundation","import OpenAPIRuntime","","struct APIHandler: APIProtocol {","    ","    var db: Database","    ","    func listTODOs(","        _ input: Operations.ListTODOs.Input","    ) async throws -> Operations.ListTODOs.Output {","        .undocumented(statusCode: 500, .init())","    }","","    func createTODO(","        _ input: Operations.CreateTODO.Input","    ) async throws -> Operations.CreateTODO.Output {","        .undocumented(statusCode: 500, .init())","    }","","    func getTODODetail(","        _ input: Operations.GetTODODetail.Input","    ) async throws -> Operations.GetTODODetail.Output {","        .undocumented(statusCode: 500, .init())","    }","","    func deleteTODO(","        _ input: Operations.DeleteTODO.Input","    ) async throws -> Operations.DeleteTODO.Output {","        .undocumented(statusCode: 500, .init())","    }","}"],"identifier":"3-apihandler.0.swift","type":"file","syntax":"swift","fileName":"APIHandler.swift","highlights":[{"line":1},{"line":2},{"line":7},{"line":8},{"line":9}]},"3-database.1.swift":{"highlights":[{"line":7}],"fileType":"swift","type":"file","syntax":"swift","fileName":"Database.swift","content":["import Fluent","import FluentPostgresDriver","import Foundation","import Vapor","","enum DB {","    final class TODO: Model, @unchecked Sendable {","        \/\/ Exercise: add in the database module","    }","}"],"identifier":"3-database.1.swift"},"doc://com.apple.ASE.getting-started/tutorials/GettingStartedSwiftServer/3-database#Run-and-test-the-code":{"abstract":[{"type":"text","text":"Use the Fluent ORM to connect a PostgreSQL database to the tutorial app."}],"type":"section","title":"Run and test the code","url":"\/tutorials\/gettingstartedswiftserver\/3-database#Run-and-test-the-code","role":"pseudoSymbol","identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/3-database#Run-and-test-the-code","kind":"section"},"3-bash-curl.3.txt":{"fileType":"","content":["% curl -i -X POST \\","-H \"Content-Type: application\/json\" \\","-d '{ \"contents\": \"my first todo\" }' \\","localhost:8080\/api\/todos","","HTTP\/1.1 201 Created","Content-Type: application\/json; charset=utf-8","content-length: 83","connection: keep-alive","date: Thu, 15 May 2025 04:59:34 GMT","","{","  \"contents\" : \"my first todo\",","  \"id\" : \"5A91C1AA-293C-4298-B725-01333BFF2544\"","}","","% curl localhost:8080\/api\/todos","{","  \"items\" : [","    {","      \"contents\" : \"my first todo\",","      \"id\" : \"5A91C1AA-293C-4298-B725-01333BFF2544\"","    }","  ]","}"],"identifier":"3-bash-curl.3.txt","type":"file","syntax":"","fileName":"Terminal 2","highlights":[{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25}]},"doc://com.apple.ASE.getting-started/tutorials/GettingStartedSwiftServer/4-wrapup":{"kind":"article","url":"\/tutorials\/gettingstartedswiftserver\/4-wrapup","title":"Review and where to go next","identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/4-wrapup","type":"topic","role":"article","abstract":[{"text":"Review what you built and where to find resources to build something you can ship to production.","type":"text"}],"estimatedTime":"5min"},"doc://com.apple.ASE.getting-started/tutorials/getting-started-swift-server/Before-you-begin":{"abstract":[],"type":"topic","title":"Before you begin","url":"\/tutorials\/getting-started-swift-server\/before-you-begin","role":"article","identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/getting-started-swift-server\/Before-you-begin","kind":"article"},"3-serverservice.1.swift":{"fileType":"swift","syntax":"swift","highlights":[{"line":14}],"fileName":"ServerService.swift","type":"file","content":["import OpenAPIVapor","import ServiceLifecycle","import Vapor","","func configureServer(_ app: Application) async throws -> ServerService {","    app.middleware.use(RequestLoggerInjectionMiddleware())","","    \/\/ A health endpoint.","    app.get(\"health\") { _ in","        \"ok\\n\"","    }","","    \/\/ Create app state.","    let handler = APIHandler(db: app.db)","","    \/\/ Register the generated handlers.","    let transport = VaporTransport(routesBuilder: app)","    try handler.registerHandlers(","        on: transport,","        serverURL: Servers.Server1.url()","    )","","    return ServerService(app: app)","}","","struct ServerService: Service {","    var app: Application","    func run() async throws {","        try await app.execute()","    }","}"],"identifier":"3-serverservice.1.swift"},"doc://com.apple.ASE.getting-started/tutorials/GettingStartedSwiftServer/4-wrapup#Where-do-I-go-from-here":{"role":"pseudoSymbol","url":"\/tutorials\/gettingstartedswiftserver\/4-wrapup#Where-do-I-go-from-here","abstract":[{"type":"text","text":"Review what you built and where to find resources to build something you can ship to production."}],"type":"section","identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/4-wrapup#Where-do-I-go-from-here","title":"Where do I go from here?","kind":"section"},"doc://com.apple.ASE.getting-started/tutorials/GettingStartedSwiftServer/3-database#Set-up-the-infrastructure":{"url":"\/tutorials\/gettingstartedswiftserver\/3-database#Set-up-the-infrastructure","abstract":[{"type":"text","text":"Use the Fluent ORM to connect a PostgreSQL database to the tutorial app."}],"title":"Set up the infrastructure","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/3-database#Set-up-the-infrastructure","type":"section"},"3-entrypoint.1.swift":{"fileType":"swift","content":["import ServiceLifecycle","import Vapor","","@main","struct Entrypoint {","    static func main() async throws {","        var env = try Environment.detect()","","        \/\/ Configure telemetry","        try await configureTelemetryServices(env: &env)","","        \/\/ Create the server","        let app = try await Vapor.Application.make()","        app.http.server.configuration.address = .hostname(","            getOptionalEnvVar(\"SERVER_ADDRESS\") ?? \"0.0.0.0\",","            port: try getOptionalEnvVar(\"SERVER_PORT\") ?? 8080","        )","","        \/\/ Configure the database","        try await configureDatabase(app: app)","","        \/\/ Configure the server","        let serverService = try await configureServer(app)","","        \/\/ Start the service group, which spins up all the service above","        let services: [Service] = [serverService]","        let serviceGroup = ServiceGroup(","            services: services,","            gracefulShutdownSignals: [.sigint],","            cancellationSignals: [.sigterm],","            logger: app.logger","        )","        try await serviceGroup.run()","    }","}"],"identifier":"3-entrypoint.1.swift","type":"file","syntax":"swift","fileName":"Entrypoint.swift","highlights":[{"line":19},{"line":20}]},"doc://com.apple.ASE.getting-started/tutorials/GettingStartedSwiftServer/3-database#Add-the-database-layer-to-the-routes":{"url":"\/tutorials\/gettingstartedswiftserver\/3-database#Add-the-database-layer-to-the-routes","type":"section","kind":"section","title":"Add the database layer to the routes","role":"pseudoSymbol","identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/3-database#Add-the-database-layer-to-the-routes","abstract":[{"type":"text","text":"Use the Fluent ORM to connect a PostgreSQL database to the tutorial app."}]},"3-bash-curl.1.txt":{"fileType":"","syntax":"","highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15}],"fileName":"Terminal 2","type":"file","content":["% curl -i -X POST \\","-H \"Content-Type: application\/json\" \\","-d '{ \"contents\": \"my first todo\" }' \\","localhost:8080\/api\/todos","","HTTP\/1.1 201 Created","Content-Type: application\/json; charset=utf-8","content-length: 83","connection: keep-alive","date: Thu, 15 May 2025 04:59:34 GMT","","{","  \"contents\" : \"my first todo\",","  \"id\" : \"5A91C1AA-293C-4298-B725-01333BFF2544\"","}"],"identifier":"3-bash-curl.1.txt"},"doc://com.apple.ASE.getting-started/tutorials/GettingStartedSwiftServer/3-database#Configure-the-database-tables-and-connection":{"kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/3-database#Configure-the-database-tables-and-connection","type":"section","title":"Configure the database tables and connection","url":"\/tutorials\/gettingstartedswiftserver\/3-database#Configure-the-database-tables-and-connection","abstract":[{"type":"text","text":"Use the Fluent ORM to connect a PostgreSQL database to the tutorial app."}]},"3-database.7.swift":{"fileType":"swift","content":["import Fluent","import FluentPostgresDriver","import Foundation","import Vapor","","func configureDatabase(app: Application) async throws {","    let postgresURL = try getOptionalURLEnvVar(\"POSTGRES_URL\")","        ?? URL(string: \"postgres:\/\/postgres@localhost:5432\/postgres?sslmode=disable\")!","    try app.databases.use(.postgres(url: postgresURL), as: .psql)","","    app.migrations.add([","        Migrations.CreateTODOs()","    ])","    try await app.autoMigrate()","}","","enum DB {","    final class TODO: Model, @unchecked Sendable {","        static let schema = \"todos\"","","        @ID(custom: \"id\", generatedBy: .user)","        var id: String?","","        @Field(key: \"contents\")","        var contents: String","    }","}","","enum Migrations {","    struct CreateTODOs: AsyncMigration {","        func prepare(on database: Database) async throws {","            try await database.schema(DB.TODO.schema)","                .field(\"id\", .string, .identifier(auto: false))","                .field(\"contents\", .string, .required)","                .create()","        }","        ","        func revert(on database: Database) async throws {","            try await database","                .schema(DB.TODO.schema)","                .delete()","        }","    }","}"],"identifier":"3-database.7.swift","type":"file","syntax":"swift","fileName":"Database.swift","highlights":[{"line":10},{"line":11},{"line":12},{"line":13},{"line":14}]},"doc://com.apple.ASE.getting-started/tutorials/GettingStartedSwiftServer/1-introduction":{"url":"\/tutorials\/gettingstartedswiftserver\/1-introduction","estimatedTime":"5min","kind":"project","abstract":[{"type":"text","text":"The tutorial example contains a Package.swift file that defines the dependencies and targets for the app, as well as a Sources directory with starter files. The finished tutorial is also provided in the Completed folder."}],"identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/1-introduction","role":"project","type":"topic","title":"Introduction"},"3-bash-swiftrun.0.txt":{"fileType":"","syntax":"","highlights":[],"fileName":"Terminal 1","type":"file","content":[" % swift run SwiftServerTodos","Building for debugging...","[1\/1] Write swift-version--61257B8C62E73F86.txt","Build of product 'SwiftServerTodos' complete! (0.45s)","[ INFO ] [Migrator] Starting prepare [database-id: psql, migration: SwiftServerTodos.Migrations.CreateTODOs]","[ INFO ] [Migrator] Finished prepare [database-id: psql, migration: SwiftServerTodos.Migrations.CreateTODOs]","[ NOTICE ] Server started on http:\/\/0.0.0.0:8080"],"identifier":"3-bash-swiftrun.0.txt"},"doc://com.apple.ASE.getting-started/tutorials/GettingStartedSwiftServer/0-setup#Verify-installed-tools":{"abstract":[{"type":"text","text":"Ensure you have the right tools and example code before learning how to write your Swift server application."}],"type":"section","title":"Verify installed tools","url":"\/tutorials\/gettingstartedswiftserver\/0-setup#Verify-installed-tools","role":"pseudoSymbol","identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/0-setup#Verify-installed-tools","kind":"section"},"3-database.3.swift":{"fileType":"swift","content":["import Fluent","import FluentPostgresDriver","import Foundation","import Vapor","","enum DB {","    final class TODO: Model, @unchecked Sendable {","        static let schema = \"todos\"","","        @ID(custom: \"id\", generatedBy: .user)","        var id: String?","","        @Field(key: \"contents\")","        var contents: String","    }","}","","enum Migrations {","    struct CreateTODOs: AsyncMigration {","        func prepare(on database: Database) async throws {","            \/\/ Exercise: add table creation logic","        }","        ","        func revert(on database: Database) async throws {","            \/\/ Exercise: add table deletion logic","        }","    }","}"],"identifier":"3-database.3.swift","type":"file","syntax":"swift","fileName":"Database.swift","highlights":[{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28}]},"3-apihandler.4.swift":{"fileType":"swift","syntax":"swift","highlights":[{"line":15},{"line":16},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25}],"fileName":"APIHandler.swift","type":"file","content":["import Fluent","import HTTPTypes","import Foundation","import OpenAPIRuntime","","struct APIHandler: APIProtocol {","    ","    var db: Database","    ","    func listTODOs(","        _ input: Operations.ListTODOs.Input","    ) async throws -> Operations.ListTODOs.Output {","        \/\/ Exercise:","        \/\/ 1. Fetch todos from database","        let dbTodos = try await db.query(DB.TODO.self).all()","        ","        \/\/ 2. Serialize them to the TODO Detail array","        let apiTodos = try dbTodos.map { todo in","            Components.Schemas.TODODetail(","                id: try todo.requireID(),","                contents: todo.contents","            )","        }","        ","        return .ok(.init(body: .json(.init(items: apiTodos))))","    }","","    func createTODO(","        _ input: Operations.CreateTODO.Input","    ) async throws -> Operations.CreateTODO.Output {","        switch input.body {","        case .json(let todo):","            \/\/ 1. Create new ID string using UUID","            let newId = UUID().uuidString","            let contents = todo.contents","","            \/\/ 2. Instantiate a new TODO object from the database with DB.TODO()","            \/\/    Populate the fields (id and contents)","            let dbTodo = DB.TODO()","            dbTodo.id = newId","            dbTodo.contents = contents","","            \/\/ 3. Save the value","            try await dbTodo.save(on: db)","","            return .created(","                .init(","                    body: .json(","                        .init(","                            id: newId,","                            contents: contents","                        )","                    )","                )","            )","        }","    }","","    func getTODODetail(","        _ input: Operations.GetTODODetail.Input","    ) async throws -> Operations.GetTODODetail.Output {","        .undocumented(statusCode: 500, .init())","    }","","    func deleteTODO(","        _ input: Operations.DeleteTODO.Input","    ) async throws -> Operations.DeleteTODO.Output {","        .undocumented(statusCode: 500, .init())","    }","}",""],"identifier":"3-apihandler.4.swift"},"3-database.6.swift":{"fileType":"swift","content":["import Fluent","import FluentPostgresDriver","import Foundation","import Vapor","","func configureDatabase(app: Application) async throws {","    let postgresURL = try getOptionalURLEnvVar(\"POSTGRES_URL\")","        ?? URL(string: \"postgres:\/\/postgres@localhost:5432\/postgres?sslmode=disable\")!","    try app.databases.use(.postgres(url: postgresURL), as: .psql)","}","","enum DB {","    final class TODO: Model, @unchecked Sendable {","        static let schema = \"todos\"","","        @ID(custom: \"id\", generatedBy: .user)","        var id: String?","","        @Field(key: \"contents\")","        var contents: String","    }","}","","enum Migrations {","    struct CreateTODOs: AsyncMigration {","        func prepare(on database: Database) async throws {","            try await database.schema(DB.TODO.schema)","                .field(\"id\", .string, .identifier(auto: false))","                .field(\"contents\", .string, .required)","                .create()","        }","        ","        func revert(on database: Database) async throws {","            try await database","                .schema(DB.TODO.schema)","                .delete()","        }","    }","}"],"identifier":"3-database.6.swift","type":"file","syntax":"swift","fileName":"Database.swift","highlights":[{"line":7},{"line":8},{"line":9}]},"doc://com.apple.ASE.getting-started/tutorials/GettingStartedSwiftServer/0-setup":{"kind":"project","url":"\/tutorials\/gettingstartedswiftserver\/0-setup","title":"Set up your development environment","identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/0-setup","type":"topic","role":"project","abstract":[{"type":"text","text":"Ensure you have the right tools and example code before learning how to write your Swift server application."}],"estimatedTime":"5min"},"3-apihandler.3.swift":{"fileType":"swift","syntax":"swift","highlights":[{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22}],"fileName":"APIHandler.swift","type":"file","content":["import Fluent","import HTTPTypes","import Foundation","import OpenAPIRuntime","","struct APIHandler: APIProtocol {","    ","    var db: Database","    ","    func listTODOs(","        _ input: Operations.ListTODOs.Input","    ) async throws -> Operations.ListTODOs.Output {","        \/\/ Exercise:","        \/\/ 1. Fetch todos from database","","        \/\/ 2. Serialize them to the TODO Detail array","        \/\/      [Components.Schemas.TODODetail]","","        \/\/ 3. Uncomment the return statement with the response below","        \/\/ return .ok(.init(body: .json(.init(items: apiTodos))))","","        \/\/ Exercise: Remove this after above logic is completed","        .undocumented(statusCode: 500, .init())","    }","","    func createTODO(","        _ input: Operations.CreateTODO.Input","    ) async throws -> Operations.CreateTODO.Output {","        switch input.body {","        case .json(let todo):","            \/\/ 1. Create new ID string using UUID","            let newId = UUID().uuidString","            let contents = todo.contents","","            \/\/ 2. Instantiate a new TODO object from the database with DB.TODO()","            \/\/    Populate the fields (id and contents)","            let dbTodo = DB.TODO()","            dbTodo.id = newId","            dbTodo.contents = contents","","            \/\/ 3. Save the value","            try await dbTodo.save(on: db)","","            return .created(","                .init(","                    body: .json(","                        .init(","                            id: newId,","                            contents: contents","                        )","                    )","                )","            )","        }","    }","","    func getTODODetail(","        _ input: Operations.GetTODODetail.Input","    ) async throws -> Operations.GetTODODetail.Output {","        .undocumented(statusCode: 500, .init())","    }","","    func deleteTODO(","        _ input: Operations.DeleteTODO.Input","    ) async throws -> Operations.DeleteTODO.Output {","        .undocumented(statusCode: 500, .init())","    }","}",""],"identifier":"3-apihandler.3.swift"},"3-bash-curl.0.txt":{"fileType":"","content":["% curl -i -X POST \\","-H \"Content-Type: application\/json\" \\","-d '{ \"contents\": \"my first todo\" }' \\","localhost:8080\/api\/todos"],"identifier":"3-bash-curl.0.txt","type":"file","syntax":"","fileName":"Terminal 2","highlights":[]},"doc://com.apple.ASE.getting-started/tutorials/GettingStartedSwiftServer/3-database":{"title":"Integrate a database","role":"project","abstract":[{"type":"text","text":"Use the Fluent ORM to connect a PostgreSQL database to the tutorial app."}],"url":"\/tutorials\/gettingstartedswiftserver\/3-database","kind":"project","estimatedTime":"10min","type":"topic","identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/3-database"},"doc://com.apple.ASE.getting-started/tutorials/getting-started-swift-server/Review-and-next-steps":{"abstract":[],"type":"topic","title":"Review and next steps","url":"\/tutorials\/getting-started-swift-server\/review-and-next-steps","role":"article","identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/getting-started-swift-server\/Review-and-next-steps","kind":"article"},"doc://com.apple.ASE.getting-started/tutorials/GettingStartedSwiftServer/4-wrapup#Review":{"kind":"section","abstract":[{"type":"text","text":"Review what you built and where to find resources to build something you can ship to production."}],"role":"pseudoSymbol","url":"\/tutorials\/gettingstartedswiftserver\/4-wrapup#Review","identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/4-wrapup#Review","title":"Review","type":"section"},"doc://com.apple.ASE.getting-started/tutorials/GettingStartedSwiftServer/0-setup#Clone-and-build-the-tutorial-repository":{"role":"pseudoSymbol","url":"\/tutorials\/gettingstartedswiftserver\/0-setup#Clone-and-build-the-tutorial-repository","abstract":[{"type":"text","text":"Ensure you have the right tools and example code before learning how to write your Swift server application."}],"type":"section","title":"Clone and build the tutorial repository","identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/0-setup#Clone-and-build-the-tutorial-repository","kind":"section"},"3-apihandler.2.swift":{"fileType":"swift","syntax":"swift","highlights":[{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":31},{"line":32},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44}],"fileName":"APIHandler.swift","type":"file","content":["import Fluent","import HTTPTypes","import Foundation","import OpenAPIRuntime","","struct APIHandler: APIProtocol {","    ","    var db: Database","    ","    func listTODOs(","        _ input: Operations.ListTODOs.Input","    ) async throws -> Operations.ListTODOs.Output {","        .undocumented(statusCode: 500, .init())","    }","","    func createTODO(","        _ input: Operations.CreateTODO.Input","    ) async throws -> Operations.CreateTODO.Output {","        switch input.body {","        case .json(let todo):","            \/\/ 1. Create new ID string using UUID","            let newId = UUID().uuidString","            let contents = todo.contents","","            \/\/ 2. Instantiate a new TODO object from the database with DB.TODO()","            \/\/    Populate the fields (id and contents)","            let dbTodo = DB.TODO()","            dbTodo.id = newId","            dbTodo.contents = contents","","            \/\/ 3. Save the value","            try await dbTodo.save(on: db)","","            return .created(","                .init(","                    body: .json(","                        .init(","                            id: newId,","                            contents: contents","                        )","                    )","                )","            )","        }","    }","","    func getTODODetail(","        _ input: Operations.GetTODODetail.Input","    ) async throws -> Operations.GetTODODetail.Output {","        .undocumented(statusCode: 500, .init())","    }","","    func deleteTODO(","        _ input: Operations.DeleteTODO.Input","    ) async throws -> Operations.DeleteTODO.Output {","        .undocumented(statusCode: 500, .init())","    }","}",""],"identifier":"3-apihandler.2.swift"},"doc://com.apple.ASE.getting-started/tutorials/getting-started-swift-server":{"type":"topic","abstract":[{"text":"Learn about cloud services in Swift by building and extending a Vapor app.","type":"text"}],"identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/getting-started-swift-server","url":"\/tutorials\/getting-started-swift-server","kind":"overview","title":"Explore Swift on the server by building a Vapor app","role":"overview"},"3-package.0.swift":{"fileType":"swift","content":["\/\/ swift-tools-version: 6.1","","import PackageDescription","","let package = Package(","    name: \"swift-server-todos\",","    platforms: [","        .macOS(.v15)","    ],","    dependencies: [","        \/\/ Server scaffolding","        .package(url: \"https:\/\/github.com\/vapor\/vapor\", from: \"4.0.0\"),","        .package(url: \"https:\/\/github.com\/swift-server\/swift-service-lifecycle\", from: \"2.1.0\"),","        .package(url: \"https:\/\/github.com\/apple\/swift-openapi-generator\", from: \"1.0.0\"),","        .package(url: \"https:\/\/github.com\/apple\/swift-openapi-runtime\", from: \"1.0.0\"),","        .package(url: \"https:\/\/github.com\/swift-server\/swift-openapi-vapor\", from: \"1.0.0\"),","","        \/\/ Telemetry","        .package(url: \"https:\/\/github.com\/apple\/swift-log\", from: \"1.5.2\"),","","        \/\/ Database","        .package(url: \"https:\/\/github.com\/vapor\/fluent.git\", from: \"4.0.0\"),","        .package(url: \"https:\/\/github.com\/vapor\/fluent-postgres-driver.git\", from: \"2.0.0\"),","    ],","    targets: [","        .executableTarget(","            name: \"SwiftServerTodos\",","            dependencies: [","                \/\/ Server scaffolding","                .product(name: \"Vapor\", package: \"vapor\"),","                .product(name: \"ServiceLifecycle\", package: \"swift-service-lifecycle\"),","                .product(name: \"OpenAPIRuntime\", package: \"swift-openapi-runtime\"),","                .product(name: \"OpenAPIVapor\", package: \"swift-openapi-vapor\"),","","                \/\/ Telemetry","                .product(name: \"Logging\", package: \"swift-log\"),","","                \/\/ Database","                .product(name: \"Fluent\", package: \"fluent\"),","                .product(name: \"FluentPostgresDriver\", package: \"fluent-postgres-driver\"),","            ],","            plugins: [","                .plugin(name: \"OpenAPIGenerator\", package: \"swift-openapi-generator\")","            ]","        )","    ]",")"],"identifier":"3-package.0.swift","type":"file","syntax":"swift","fileName":"Database.swift","highlights":[{"line":37},{"line":38},{"line":39},{"line":40}]},"doc://com.apple.ASE.getting-started/tutorials/GettingStartedSwiftServer/2-openapi#Configure-Vapor-to-use-the-API-handler":{"abstract":[{"type":"text","text":"Learn how to add an OpenAPI document, generate server stubs using the OpenAPI plugin, and integrate the generated code into the app."}],"type":"section","title":"Configure Vapor to use the API handler","url":"\/tutorials\/gettingstartedswiftserver\/2-openapi#Configure-Vapor-to-use-the-API-handler","role":"pseudoSymbol","identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/2-openapi#Configure-Vapor-to-use-the-API-handler","kind":"section"},"3-bash.0.txt":{"fileType":"","syntax":"","highlights":[],"fileName":"Terminal","type":"file","content":["% docker compose up postgres","[+] Running 2\/2"," ⠿ Network swiftservertodos_default       Created              0.1s"," ⠿ Container swiftservertodos-postgres-1  Created              0.1s","Attaching to swiftservertodos-postgres-1","..."],"identifier":"3-bash.0.txt"},"doc://com.apple.ASE.getting-started/tutorials/GettingStartedSwiftServer/1-introduction#Explore-the-parts-of-a-basic-app":{"abstract":[{"type":"text","text":"The tutorial example contains a Package.swift file that defines the dependencies and targets for the app, as well as a Sources directory with starter files. The finished tutorial is also provided in the Completed folder."}],"type":"section","title":"Explore the parts of a basic app","url":"\/tutorials\/gettingstartedswiftserver\/1-introduction#Explore-the-parts-of-a-basic-app","role":"pseudoSymbol","identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/1-introduction#Explore-the-parts-of-a-basic-app","kind":"section"},"3-database.2.swift":{"fileType":"swift","highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14}],"syntax":"swift","content":["import Fluent","import FluentPostgresDriver","import Foundation","import Vapor","","enum DB {","    final class TODO: Model, @unchecked Sendable {","        static let schema = \"todos\"","","        @ID(custom: \"id\", generatedBy: .user)","        var id: String?","","        @Field(key: \"contents\")","        var contents: String","    }","}"],"identifier":"3-database.2.swift","type":"file","fileName":"Database.swift"},"doc://com.apple.ASE.getting-started/tutorials/getting-started-swift-server/Build-a-basic-Vapor-app":{"kind":"article","url":"\/tutorials\/getting-started-swift-server\/build-a-basic-vapor-app","title":"Build a basic Vapor app","identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/getting-started-swift-server\/Build-a-basic-Vapor-app","type":"topic","role":"article","abstract":[]},"doc://com.apple.ASE.getting-started/tutorials/GettingStartedSwiftServer/2-openapi#OpenAPI-generator":{"url":"\/tutorials\/gettingstartedswiftserver\/2-openapi#OpenAPI-generator","type":"section","kind":"section","title":"OpenAPI generator","role":"pseudoSymbol","identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/2-openapi#OpenAPI-generator","abstract":[{"type":"text","text":"Learn how to add an OpenAPI document, generate server stubs using the OpenAPI plugin, and integrate the generated code into the app."}]},"3-database.4.swift":{"fileType":"swift","syntax":"swift","highlights":[{"line":21},{"line":22},{"line":23},{"line":24},{"line":28},{"line":29},{"line":30}],"fileName":"Database.swift","type":"file","content":["import Fluent","import FluentPostgresDriver","import Foundation","import Vapor","","enum DB {","    final class TODO: Model, @unchecked Sendable {","        static let schema = \"todos\"","","        @ID(custom: \"id\", generatedBy: .user)","        var id: String?","","        @Field(key: \"contents\")","        var contents: String","    }","}","","enum Migrations {","    struct CreateTODOs: AsyncMigration {","        func prepare(on database: Database) async throws {","            try await database.schema(DB.TODO.schema)","                .field(\"id\", .string, .identifier(auto: false))","                .field(\"contents\", .string, .required)","                .create()","        }","        ","        func revert(on database: Database) async throws {","            try await database","                .schema(DB.TODO.schema)","                .delete()","        }","    }","}"],"identifier":"3-database.4.swift"},"doc://com.apple.ASE.getting-started/tutorials/GettingStartedSwiftServer/2-openapi#Add-an-OpenAPI-document":{"kind":"section","url":"\/tutorials\/gettingstartedswiftserver\/2-openapi#Add-an-OpenAPI-document","identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/2-openapi#Add-an-OpenAPI-document","title":"Add an OpenAPI document","role":"pseudoSymbol","type":"section","abstract":[{"type":"text","text":"Learn how to add an OpenAPI document, generate server stubs using the OpenAPI plugin, and integrate the generated code into the app."}]},"doc://com.apple.ASE.getting-started/tutorials/GettingStartedSwiftServer/4-wrapup#Summary":{"url":"\/tutorials\/gettingstartedswiftserver\/4-wrapup#Summary","type":"section","kind":"section","title":"Summary","role":"pseudoSymbol","identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/4-wrapup#Summary","abstract":[{"type":"text","text":"Review what you built and where to find resources to build something you can ship to production."}]},"3-database.0.swift":{"syntax":"swift","fileName":"Database.swift","fileType":"swift","identifier":"3-database.0.swift","content":["import Fluent","import FluentPostgresDriver","import Foundation","import Vapor","","enum DB {","    final class TODO {","        \/\/ Exercise: add in the database module","    }","}"],"type":"file","highlights":[{"line":1},{"line":2},{"line":6},{"line":7},{"line":8},{"line":9}]},"3-apihandler.1.swift":{"fileType":"swift","syntax":"swift","highlights":[{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":55}],"fileName":"APIHandler.swift","type":"file","content":["import Fluent","import HTTPTypes","import Foundation","import OpenAPIRuntime","","struct APIHandler: APIProtocol {","    ","    var db: Database","    ","    func listTODOs(","        _ input: Operations.ListTODOs.Input","    ) async throws -> Operations.ListTODOs.Output {","        .undocumented(statusCode: 500, .init())","    }","","    func createTODO(","        _ input: Operations.CreateTODO.Input","    ) async throws -> Operations.CreateTODO.Output {","        \/\/ Exercise:","        \/\/ 0. uncomment switch condition","        \/\/ switch input.body {","        \/\/ case .json(let todo):","","        \/\/ 1. Create new ID string using UUID","        \/\/ https:\/\/developer.apple.com\/documentation\/foundation\/uuid\/uuidstring","","        \/\/ 2. Instantiate a new TODO object from the database with DB.TODO().","        \/\/    Populate the fields (id and contents)","","        \/\/ 3. Save the value","        ","        \/\/ 4. Uncomment to return the response","        \/\/ return .created(.init(body: .json(.init(","        \/\/     id: newId,","        \/\/     contents: contents","        \/\/ ))))","        \/\/ }","","        \/\/ Exercise: Remove this after above logic is completed","        .undocumented(statusCode: 500, .init())","    }","","    func getTODODetail(","        _ input: Operations.GetTODODetail.Input","    ) async throws -> Operations.GetTODODetail.Output {","        .undocumented(statusCode: 500, .init())","    }","","    func deleteTODO(","        _ input: Operations.DeleteTODO.Input","    ) async throws -> Operations.DeleteTODO.Output {","        .undocumented(statusCode: 500, .init())","    }","}",""],"identifier":"3-apihandler.1.swift"},"3-bash-curl.2.txt":{"fileType":"","content":["% curl -i -X POST \\","-H \"Content-Type: application\/json\" \\","-d '{ \"contents\": \"my first todo\" }' \\","localhost:8080\/api\/todos","","HTTP\/1.1 201 Created","Content-Type: application\/json; charset=utf-8","content-length: 83","connection: keep-alive","date: Thu, 15 May 2025 04:59:34 GMT","","{","  \"contents\" : \"my first todo\",","  \"id\" : \"5A91C1AA-293C-4298-B725-01333BFF2544\"","}","","% curl localhost:8080\/api\/todos"],"identifier":"3-bash-curl.2.txt","type":"file","syntax":"","fileName":"Terminal 2","highlights":[{"line":16},{"line":17}]},"3-database.5.swift":{"fileType":"swift","syntax":"swift","highlights":[{"line":6},{"line":7},{"line":8},{"line":9}],"fileName":"Database.swift","type":"file","content":["import Fluent","import FluentPostgresDriver","import Foundation","import Vapor","","func configureDatabase(app: Application) async throws {","    \/\/ Exercise: configure the database connection","}","","enum DB {","    final class TODO: Model, @unchecked Sendable {","        static let schema = \"todos\"","","        @ID(custom: \"id\", generatedBy: .user)","        var id: String?","","        @Field(key: \"contents\")","        var contents: String","    }","}","","enum Migrations {","    struct CreateTODOs: AsyncMigration {","        func prepare(on database: Database) async throws {","            try await database.schema(DB.TODO.schema)","                .field(\"id\", .string, .identifier(auto: false))","                .field(\"contents\", .string, .required)","                .create()","        }","        ","        func revert(on database: Database) async throws {","            try await database","                .schema(DB.TODO.schema)","                .delete()","        }","    }","}"],"identifier":"3-database.5.swift"}}}