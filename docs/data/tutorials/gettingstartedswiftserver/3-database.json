{"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[{"estimatedTimeInMinutes":10,"content":[{"inlineContent":[{"type":"text","text":"Use the Fluent ORM to connect a PostgreSQL database to the tutorial app."}],"type":"paragraph"}],"kind":"hero","chapter":"Build a basic Vapor app","title":"Integrate a database"},{"kind":"tasks","tasks":[{"title":"Set up the infrastructure","contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"Set up the app dependencies."}],"type":"paragraph"}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"stepsSection":[{"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Open a new terminal and run docker compose to start a Postgres server."}]}],"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Run","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"% docker compose up postgres"}]}],"code":"3-bash.0.txt","type":"step","media":null,"runtimePreview":null}],"anchor":"Set-up-the-infrastructure"},{"title":"Configure the database tables and connection","contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"Create tables with Fluent in code as a Model and then use Migrations in the database. You configure the database connection and learn where to run the migrations for the app."}],"type":"paragraph"}],"mediaPosition":"trailing"}],"stepsSection":[{"caption":[{"inlineContent":[{"text":"Open ","type":"text"},{"code":"Package.swift","type":"codeVoice"},{"text":" to add the Fluent dependencies to the target.","type":"text"}],"type":"paragraph"}],"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Add"}],"type":"strong"},{"type":"text","text":" the Fluent dependencies"}],"type":"paragraph"}],"runtimePreview":null,"type":"step","media":null,"code":"3-package.0.swift"},{"caption":[{"inlineContent":[{"type":"text","text":"Change "},{"code":"TODO","type":"codeVoice"},{"type":"text","text":" to a class that will represent a database table.  "},{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"type":"text","text":" The class is nested in the parent type "},{"code":"DB","type":"codeVoice"},{"type":"text","text":" to provide a namespace for the class."}],"type":"paragraph"}],"content":[{"inlineContent":[{"inlineContent":[{"text":"Edit","type":"text"}],"type":"strong"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Database.swift"}],"type":"paragraph"}],"runtimePreview":null,"type":"step","media":null,"code":"3-database.0.swift"},{"caption":[{"type":"paragraph","inlineContent":[{"text":"This enables the class to benefit from default implementations of common database operations.","type":"text"}]}],"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Edit"}]},{"type":"text","text":" the class to conform to a Fluent "},{"type":"codeVoice","code":"Model"},{"type":"text","text":"."}]}],"runtimePreview":null,"type":"step","media":null,"code":"3-database.1.swift"},{"caption":[{"inlineContent":[{"type":"text","text":"The "},{"code":"ID","type":"codeVoice"},{"type":"text","text":" serves as the primary key of the database, "},{"code":"Field","type":"codeVoice"},{"type":"text","text":" identifies a column of type string called contents."}],"type":"paragraph"}],"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Add","type":"text"}]},{"type":"text","text":" the "},{"type":"codeVoice","code":"schema"},{"type":"text","text":" property, define an "},{"type":"codeVoice","code":"ID"},{"type":"text","text":", to satisfy the "},{"type":"codeVoice","code":"Model"},{"type":"text","text":" protocol."}],"type":"paragraph"}],"runtimePreview":null,"type":"step","media":null,"code":"3-database.2.swift"},{"caption":[{"inlineContent":[{"type":"text","text":"Add CreateTODOs, conforming to "},{"type":"codeVoice","code":"AsyncMigration"},{"type":"text","text":" with stubs to provide the migration to create a table."}],"type":"paragraph"}],"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Create","type":"text"}]},{"type":"text","text":" a "},{"type":"codeVoice","code":"Migrations"},{"type":"text","text":" enum for a namespace"}],"type":"paragraph"}],"runtimePreview":null,"type":"step","media":null,"code":"3-database.3.swift"},{"caption":[{"inlineContent":[{"code":"database.schema(_)","type":"codeVoice"},{"type":"text","text":" and "},{"code":"field(_)","type":"codeVoice"},{"type":"text","text":" to reference the table, while the "},{"code":"create()","type":"codeVoice"},{"type":"text","text":" and "},{"code":"delete()","type":"codeVoice"},{"type":"text","text":" methods do the bulk of the work."}],"type":"paragraph"}],"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Implement"}],"type":"strong"},{"text":" the migrations.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"type":"step","media":null,"code":"3-database.4.swift"},{"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The function will configure the connection to the databse and run the migrations."}]}],"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Create"}],"type":"strong"},{"type":"text","text":" a "},{"type":"codeVoice","code":"configureDatabase"},{"type":"text","text":" function"}]}],"runtimePreview":null,"type":"step","media":null,"code":"3-database.5.swift"},{"caption":[{"type":"paragraph","inlineContent":[{"text":"Choose the URL by either reading it from the environment or defaulting to something that would work in most development setups.","type":"text"}]}],"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Define","type":"text"}]},{"type":"text","text":" a URL that provides the connection to the database."}]}],"runtimePreview":null,"type":"step","media":null,"code":"3-database.6.swift"},{"caption":[{"inlineContent":[{"type":"text","text":"The database migrations will create the table."}],"type":"paragraph"}],"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Configure"}],"type":"strong"},{"text":" the function to run the database migrations","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"type":"step","media":null,"code":"3-database.7.swift"},{"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Calling "},{"type":"codeVoice","code":"configureDatabase"},{"type":"text","text":" with a reference to "},{"type":"codeVoice","code":"app"},{"type":"text","text":" will connect to the database using the URL and run the migrations before the app initializes the server."}]}],"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Add","type":"text"}],"type":"strong"},{"text":" a call to ","type":"text"},{"type":"codeVoice","code":"configureDatabase(app: app)"}]}],"runtimePreview":null,"type":"step","media":null,"code":"3-entrypoint.1.swift"}],"anchor":"Configure-the-database-tables-and-connection"},{"title":"Add the database layer to the routes","contentSection":[{"mediaPosition":"trailing","content":[{"inlineContent":[{"type":"text","text":"Build on the OpenAPI stubs built in a previous section to add persistence to your OpenAPI routes."}],"type":"paragraph"}],"kind":"contentAndMedia"}],"stepsSection":[{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Edit"}]},{"type":"text","text":" "},{"code":"APIHandler.swift","type":"codeVoice"}]}],"caption":[{"type":"paragraph","inlineContent":[{"text":"Add a ","type":"text"},{"code":"DB","type":"codeVoice"},{"text":" property, and add imports for ","type":"text"},{"code":"Fluent","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"HTTPTypes","type":"codeVoice"},{"text":".","type":"text"}]}],"runtimePreview":null,"code":"3-apihandler.0.swift","media":null},{"type":"step","content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Review"}]},{"type":"text","text":" the idea for creating a new TODO."}],"type":"paragraph"}],"caption":[{"inlineContent":[{"type":"text","text":"As part of the OpenAPI generated types, we have the stubs of the methods we need to implement for our routes. In the previous chapter, we had returned a 500 status code for the create todo route."}],"type":"paragraph"}],"runtimePreview":null,"code":"3-apihandler.1.swift","media":null},{"type":"step","content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Implement"}],"type":"strong"},{"text":" the code to read from the postgres database.","type":"text"}],"type":"paragraph"}],"caption":[{"inlineContent":[{"type":"text","text":"Use the "},{"code":"DB.TODO()","type":"codeVoice"},{"type":"text","text":" method to Instantiate a new TODO object from the database."}],"type":"paragraph"}],"runtimePreview":null,"code":"3-apihandler.2.swift","media":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Review"}]},{"type":"text","text":" the idea for listing all the available TODOs."}]}],"caption":[{"type":"paragraph","inlineContent":[{"text":"Review the commented code to evalute the idea for listing all of the TODOs from the database.","type":"text"}]}],"runtimePreview":null,"code":"3-apihandler.3.swift","media":null},{"type":"step","content":[{"inlineContent":[{"inlineContent":[{"text":"Implement","type":"text"}],"type":"strong"},{"text":" fetching and returning the TODOs from the database.","type":"text"}],"type":"paragraph"}],"caption":[{"inlineContent":[{"type":"text","text":"Fetch TODOs from the database and store them in an array using the code on the right."}],"type":"paragraph"}],"runtimePreview":null,"code":"3-apihandler.4.swift","media":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Edit","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"ServerService.swift"},{"type":"text","text":"."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add the database as a parameter to "},{"type":"codeVoice","code":"APIHandler"},{"type":"text","text":"."}]}],"runtimePreview":null,"code":"3-serverservice.1.swift","media":null}],"anchor":"Add-the-database-layer-to-the-routes"},{"title":"Run and test the code","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"inlineContent":[{"text":"Using a terminal, run the updated Vapor app and try it out!","type":"text"}],"type":"paragraph"}]}],"stepsSection":[{"type":"step","caption":[{"inlineContent":[{"text":"To test your work, run the commands on the right in 2 separate terminals.","type":"text"},{"text":" ","type":"text"},{"text":"In this first terminal, run the server.","type":"text"}],"type":"paragraph"}],"media":null,"code":"3-bash-swiftrun.0.txt","runtimePreview":null,"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Run","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"% swift run SwiftServerTodos"}],"type":"paragraph"}]},{"type":"step","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In a second terminal, run a "},{"type":"codeVoice","code":"curl"},{"type":"text","text":" HTTP "},{"type":"codeVoice","code":"POST"},{"type":"text","text":" request to create a TODO."}]}],"media":null,"code":"3-bash-curl.0.txt","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Run"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"% curl -i -X POST \\ -H \"Content-Type: application\/json\" \\ -d '{ \"contents\": \"my first todo\" }' \\ localhost:8080\/api\/todos"}]}]},{"type":"step","caption":[{"type":"paragraph","inlineContent":[{"text":"The output includes ","type":"text"},{"code":"HTTP\/1.1 201 Created","type":"codeVoice"},{"text":" and shows the new TODO created.","type":"text"}]}],"media":null,"code":"3-bash-curl.1.txt","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Review","type":"text"}]},{"type":"text","text":" the output in the second terminal."}]}]},{"type":"step","caption":[{"type":"paragraph","inlineContent":[{"text":"After creating the new TODO, make a ","type":"text"},{"code":"GET","type":"codeVoice"},{"text":" request to retrieve all the TODOs.","type":"text"}]}],"media":null,"code":"3-bash-curl.2.txt","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Run"}],"type":"strong"},{"type":"text","text":" "},{"code":"% curl localhost:8080\/api\/todos","type":"codeVoice"}]}]},{"type":"step","caption":[{"type":"paragraph","inlineContent":[{"text":"You should see the todo you created earlier.","type":"text"}]}],"media":null,"code":"3-bash-curl.3.txt","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Review","type":"text"}]},{"type":"text","text":" the output"}]}]}],"anchor":"Run-and-test-the-code"}]},{"featuredEyebrow":"Article","abstract":[{"type":"text","text":"Review what you built and where to find resources to build something you can ship to production."}],"kind":"callToAction","action":{"overridingTitle":"Read article","type":"reference","isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"Read article"}],"identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/4-wrapup"},"title":"Review and where to go next"}],"hierarchy":{"paths":[["doc:\/\/com.apple.ASE.getting-started\/tutorials\/getting-started-swift-server","doc:\/\/com.apple.ASE.getting-started\/tutorials\/getting-started-swift-server\/$volume","doc:\/\/com.apple.ASE.getting-started\/tutorials\/getting-started-swift-server\/Build-a-basic-Vapor-app"]],"modules":[{"reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/getting-started-swift-server\/Before-you-begin","projects":[{"reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/0-setup","sections":[{"reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/0-setup#Verify-installed-tools","kind":"task"},{"reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/0-setup#Clone-and-build-the-tutorial-repository","kind":"task"}]}]},{"reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/getting-started-swift-server\/Build-a-basic-Vapor-app","projects":[{"reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/1-introduction","sections":[{"kind":"task","reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/1-introduction#Explore-the-parts-of-a-basic-app"}]},{"reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/2-openapi","sections":[{"kind":"task","reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/2-openapi#Add-an-OpenAPI-document"},{"kind":"task","reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/2-openapi#OpenAPI-generator"},{"kind":"task","reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/2-openapi#Configure-Vapor-to-use-the-API-handler"}]},{"reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/3-database","sections":[{"kind":"task","reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/3-database#Set-up-the-infrastructure"},{"kind":"task","reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/3-database#Configure-the-database-tables-and-connection"},{"kind":"task","reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/3-database#Add-the-database-layer-to-the-routes"},{"kind":"task","reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/3-database#Run-and-test-the-code"}]}]},{"reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/getting-started-swift-server\/Review-and-next-steps","projects":[{"sections":[{"kind":"heading","reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/4-wrapup#Summary"},{"kind":"heading","reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/4-wrapup#Review"},{"kind":"heading","reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/4-wrapup#Where-do-I-go-from-here"}],"reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/4-wrapup"}]}],"reference":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/getting-started-swift-server"},"metadata":{"title":"Integrate a database","category":"Get Started with Swift Server","categoryPathComponent":"getting-started-swift-server","role":"project"},"identifier":{"url":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/3-database","interfaceLanguage":"swift"},"kind":"project","variants":[{"paths":["\/tutorials\/gettingstartedswiftserver\/3-database"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://com.apple.ASE.getting-started/tutorials/getting-started-swift-server/Before-you-begin":{"title":"Before you begin","kind":"article","abstract":[],"role":"article","type":"topic","identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/getting-started-swift-server\/Before-you-begin","url":"\/tutorials\/getting-started-swift-server\/before-you-begin"},"3-apihandler.4.swift":{"fileType":"swift","highlights":[{"line":15},{"line":16},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25}],"type":"file","content":["import Fluent","import HTTPTypes","import Foundation","import OpenAPIRuntime","","struct APIHandler: APIProtocol {","    ","    var db: Database","    ","    func listTODOs(","        _ input: Operations.ListTODOs.Input","    ) async throws -> Operations.ListTODOs.Output {","        \/\/ Exercise:","        \/\/ 1. Fetch todos from database","        let dbTodos = try await db.query(DB.TODO.self).all()","        ","        \/\/ 2. Serialize them to the TODO Detail array","        let apiTodos = try dbTodos.map { todo in","            Components.Schemas.TODODetail(","                id: try todo.requireID(),","                contents: todo.contents","            )","        }","        ","        return .ok(.init(body: .json(.init(items: apiTodos))))","    }","","    func createTODO(","        _ input: Operations.CreateTODO.Input","    ) async throws -> Operations.CreateTODO.Output {","        switch input.body {","        case .json(let todo):","            \/\/ 1. Create new ID string using UUID","            let newId = UUID().uuidString","            let contents = todo.contents","","            \/\/ 2. Instantiate a new TODO object from the database with DB.TODO()","            \/\/    Populate the fields (id and contents)","            let dbTodo = DB.TODO()","            dbTodo.id = newId","            dbTodo.contents = contents","","            \/\/ 3. Save the value","            try await dbTodo.save(on: db)","","            return .created(","                .init(","                    body: .json(","                        .init(","                            id: newId,","                            contents: contents","                        )","                    )","                )","            )","        }","    }","","    func getTODODetail(","        _ input: Operations.GetTODODetail.Input","    ) async throws -> Operations.GetTODODetail.Output {","        .undocumented(statusCode: 500, .init())","    }","","    func deleteTODO(","        _ input: Operations.DeleteTODO.Input","    ) async throws -> Operations.DeleteTODO.Output {","        .undocumented(statusCode: 500, .init())","    }","}",""],"fileName":"APIHandler.swift","identifier":"3-apihandler.4.swift","syntax":"swift"},"doc://com.apple.ASE.getting-started/tutorials/GettingStartedSwiftServer/2-openapi#Add-an-OpenAPI-document":{"url":"\/tutorials\/gettingstartedswiftserver\/2-openapi#Add-an-OpenAPI-document","title":"Add an OpenAPI document","identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/2-openapi#Add-an-OpenAPI-document","kind":"section","type":"section","abstract":[{"type":"text","text":"Learn how to add an OpenAPI document, generate server stubs using the OpenAPI plugin, and integrate the generated code into the app."}],"role":"pseudoSymbol"},"doc://com.apple.ASE.getting-started/tutorials/GettingStartedSwiftServer/0-setup#Verify-installed-tools":{"url":"\/tutorials\/gettingstartedswiftserver\/0-setup#Verify-installed-tools","type":"section","kind":"section","identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/0-setup#Verify-installed-tools","abstract":[{"type":"text","text":"Ensure you have the right tools and example code before learning how to write your Swift server application."}],"role":"pseudoSymbol","title":"Verify installed tools"},"3-database.6.swift":{"highlights":[{"line":7},{"line":8},{"line":9}],"identifier":"3-database.6.swift","content":["import Fluent","import FluentPostgresDriver","import Foundation","import Vapor","","func configureDatabase(app: Application) async throws {","    let postgresURL = try getOptionalURLEnvVar(\"POSTGRES_URL\")","        ?? URL(string: \"postgres:\/\/postgres@localhost:5432\/postgres?sslmode=disable\")!","    try app.databases.use(.postgres(url: postgresURL), as: .psql)","}","","enum DB {","    final class TODO: Model, @unchecked Sendable {","        static let schema = \"todos\"","","        @ID(custom: \"id\", generatedBy: .user)","        var id: String?","","        @Field(key: \"contents\")","        var contents: String","    }","}","","enum Migrations {","    struct CreateTODOs: AsyncMigration {","        func prepare(on database: Database) async throws {","            try await database.schema(DB.TODO.schema)","                .field(\"id\", .string, .identifier(auto: false))","                .field(\"contents\", .string, .required)","                .create()","        }","        ","        func revert(on database: Database) async throws {","            try await database","                .schema(DB.TODO.schema)","                .delete()","        }","    }","}"],"fileType":"swift","fileName":"Database.swift","type":"file","syntax":"swift"},"doc://com.apple.ASE.getting-started/tutorials/GettingStartedSwiftServer/4-wrapup#Summary":{"abstract":[{"type":"text","text":"Review what you built and where to find resources to build something you can ship to production."}],"identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/4-wrapup#Summary","url":"\/tutorials\/gettingstartedswiftserver\/4-wrapup#Summary","role":"pseudoSymbol","type":"section","title":"Summary","kind":"section"},"3-database.4.swift":{"content":["import Fluent","import FluentPostgresDriver","import Foundation","import Vapor","","enum DB {","    final class TODO: Model, @unchecked Sendable {","        static let schema = \"todos\"","","        @ID(custom: \"id\", generatedBy: .user)","        var id: String?","","        @Field(key: \"contents\")","        var contents: String","    }","}","","enum Migrations {","    struct CreateTODOs: AsyncMigration {","        func prepare(on database: Database) async throws {","            try await database.schema(DB.TODO.schema)","                .field(\"id\", .string, .identifier(auto: false))","                .field(\"contents\", .string, .required)","                .create()","        }","        ","        func revert(on database: Database) async throws {","            try await database","                .schema(DB.TODO.schema)","                .delete()","        }","    }","}"],"identifier":"3-database.4.swift","syntax":"swift","fileName":"Database.swift","highlights":[{"line":21},{"line":22},{"line":23},{"line":24},{"line":28},{"line":29},{"line":30}],"fileType":"swift","type":"file"},"doc://com.apple.ASE.getting-started/tutorials/GettingStartedSwiftServer/2-openapi":{"abstract":[{"type":"text","text":"Learn how to add an OpenAPI document, generate server stubs using the OpenAPI plugin, and integrate the generated code into the app."}],"identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/2-openapi","url":"\/tutorials\/gettingstartedswiftserver\/2-openapi","role":"project","estimatedTime":"10min","type":"topic","title":"Specify routes using OpenAPI","kind":"project"},"3-apihandler.3.swift":{"highlights":[{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22}],"identifier":"3-apihandler.3.swift","content":["import Fluent","import HTTPTypes","import Foundation","import OpenAPIRuntime","","struct APIHandler: APIProtocol {","    ","    var db: Database","    ","    func listTODOs(","        _ input: Operations.ListTODOs.Input","    ) async throws -> Operations.ListTODOs.Output {","        \/\/ Exercise:","        \/\/ 1. Fetch todos from database","","        \/\/ 2. Serialize them to the TODO Detail array","        \/\/      [Components.Schemas.TODODetail]","","        \/\/ 3. Uncomment the return statement with the response below","        \/\/ return .ok(.init(body: .json(.init(items: apiTodos))))","","        \/\/ Exercise: Remove this after above logic is completed","        .undocumented(statusCode: 500, .init())","    }","","    func createTODO(","        _ input: Operations.CreateTODO.Input","    ) async throws -> Operations.CreateTODO.Output {","        switch input.body {","        case .json(let todo):","            \/\/ 1. Create new ID string using UUID","            let newId = UUID().uuidString","            let contents = todo.contents","","            \/\/ 2. Instantiate a new TODO object from the database with DB.TODO()","            \/\/    Populate the fields (id and contents)","            let dbTodo = DB.TODO()","            dbTodo.id = newId","            dbTodo.contents = contents","","            \/\/ 3. Save the value","            try await dbTodo.save(on: db)","","            return .created(","                .init(","                    body: .json(","                        .init(","                            id: newId,","                            contents: contents","                        )","                    )","                )","            )","        }","    }","","    func getTODODetail(","        _ input: Operations.GetTODODetail.Input","    ) async throws -> Operations.GetTODODetail.Output {","        .undocumented(statusCode: 500, .init())","    }","","    func deleteTODO(","        _ input: Operations.DeleteTODO.Input","    ) async throws -> Operations.DeleteTODO.Output {","        .undocumented(statusCode: 500, .init())","    }","}",""],"type":"file","fileType":"swift","syntax":"swift","fileName":"APIHandler.swift"},"3-package.0.swift":{"fileName":"Database.swift","syntax":"swift","highlights":[{"line":37},{"line":38},{"line":39},{"line":40}],"content":["\/\/ swift-tools-version: 6.1","","import PackageDescription","","let package = Package(","    name: \"swift-server-todos\",","    platforms: [","        .macOS(.v15)","    ],","    dependencies: [","        \/\/ Server scaffolding","        .package(url: \"https:\/\/github.com\/vapor\/vapor\", from: \"4.0.0\"),","        .package(url: \"https:\/\/github.com\/swift-server\/swift-service-lifecycle\", from: \"2.1.0\"),","        .package(url: \"https:\/\/github.com\/apple\/swift-openapi-generator\", from: \"1.0.0\"),","        .package(url: \"https:\/\/github.com\/apple\/swift-openapi-runtime\", from: \"1.0.0\"),","        .package(url: \"https:\/\/github.com\/swift-server\/swift-openapi-vapor\", from: \"1.0.0\"),","","        \/\/ Telemetry","        .package(url: \"https:\/\/github.com\/apple\/swift-log\", from: \"1.5.2\"),","","        \/\/ Database","        .package(url: \"https:\/\/github.com\/vapor\/fluent.git\", from: \"4.0.0\"),","        .package(url: \"https:\/\/github.com\/vapor\/fluent-postgres-driver.git\", from: \"2.0.0\"),","    ],","    targets: [","        .executableTarget(","            name: \"SwiftServerTodos\",","            dependencies: [","                \/\/ Server scaffolding","                .product(name: \"Vapor\", package: \"vapor\"),","                .product(name: \"ServiceLifecycle\", package: \"swift-service-lifecycle\"),","                .product(name: \"OpenAPIRuntime\", package: \"swift-openapi-runtime\"),","                .product(name: \"OpenAPIVapor\", package: \"swift-openapi-vapor\"),","","                \/\/ Telemetry","                .product(name: \"Logging\", package: \"swift-log\"),","","                \/\/ Database","                .product(name: \"Fluent\", package: \"fluent\"),","                .product(name: \"FluentPostgresDriver\", package: \"fluent-postgres-driver\"),","            ],","            plugins: [","                .plugin(name: \"OpenAPIGenerator\", package: \"swift-openapi-generator\")","            ]","        )","    ]",")"],"fileType":"swift","type":"file","identifier":"3-package.0.swift"},"doc://com.apple.ASE.getting-started/tutorials/GettingStartedSwiftServer/2-openapi#Configure-Vapor-to-use-the-API-handler":{"url":"\/tutorials\/gettingstartedswiftserver\/2-openapi#Configure-Vapor-to-use-the-API-handler","type":"section","kind":"section","identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/2-openapi#Configure-Vapor-to-use-the-API-handler","abstract":[{"type":"text","text":"Learn how to add an OpenAPI document, generate server stubs using the OpenAPI plugin, and integrate the generated code into the app."}],"role":"pseudoSymbol","title":"Configure Vapor to use the API handler"},"3-entrypoint.1.swift":{"identifier":"3-entrypoint.1.swift","highlights":[{"line":19},{"line":20}],"content":["import ServiceLifecycle","import Vapor","","@main","struct Entrypoint {","    static func main() async throws {","        var env = try Environment.detect()","","        \/\/ Configure telemetry","        try await configureTelemetryServices(env: &env)","","        \/\/ Create the server","        let app = try await Vapor.Application.make()","        app.http.server.configuration.address = .hostname(","            getOptionalEnvVar(\"SERVER_ADDRESS\") ?? \"0.0.0.0\",","            port: try getOptionalEnvVar(\"SERVER_PORT\") ?? 8080","        )","","        \/\/ Configure the database","        try await configureDatabase(app: app)","","        \/\/ Configure the server","        let serverService = try await configureServer(app)","","        \/\/ Start the service group, which spins up all the service above","        let services: [Service] = [serverService]","        let serviceGroup = ServiceGroup(","            services: services,","            gracefulShutdownSignals: [.sigint],","            cancellationSignals: [.sigterm],","            logger: app.logger","        )","        try await serviceGroup.run()","    }","}"],"fileName":"Entrypoint.swift","fileType":"swift","type":"file","syntax":"swift"},"doc://com.apple.ASE.getting-started/tutorials/GettingStartedSwiftServer/1-introduction#Explore-the-parts-of-a-basic-app":{"identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/1-introduction#Explore-the-parts-of-a-basic-app","url":"\/tutorials\/gettingstartedswiftserver\/1-introduction#Explore-the-parts-of-a-basic-app","role":"pseudoSymbol","type":"section","abstract":[{"type":"text","text":"The tutorial example contains a Package.swift file that defines the dependencies and targets for the app, as well as a Sources directory with starter files. The finished tutorial is also provided in the Completed folder."}],"kind":"section","title":"Explore the parts of a basic app"},"doc://com.apple.ASE.getting-started/tutorials/GettingStartedSwiftServer/4-wrapup":{"url":"\/tutorials\/gettingstartedswiftserver\/4-wrapup","kind":"article","estimatedTime":"5min","title":"Review and where to go next","identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/4-wrapup","type":"topic","abstract":[{"type":"text","text":"Review what you built and where to find resources to build something you can ship to production."}],"role":"article"},"3-apihandler.0.swift":{"highlights":[{"line":1},{"line":2},{"line":7},{"line":8},{"line":9}],"type":"file","syntax":"swift","content":["import Fluent","import HTTPTypes","import Foundation","import OpenAPIRuntime","","struct APIHandler: APIProtocol {","    ","    var db: Database","    ","    func listTODOs(","        _ input: Operations.ListTODOs.Input","    ) async throws -> Operations.ListTODOs.Output {","        .undocumented(statusCode: 500, .init())","    }","","    func createTODO(","        _ input: Operations.CreateTODO.Input","    ) async throws -> Operations.CreateTODO.Output {","        .undocumented(statusCode: 500, .init())","    }","","    func getTODODetail(","        _ input: Operations.GetTODODetail.Input","    ) async throws -> Operations.GetTODODetail.Output {","        .undocumented(statusCode: 500, .init())","    }","","    func deleteTODO(","        _ input: Operations.DeleteTODO.Input","    ) async throws -> Operations.DeleteTODO.Output {","        .undocumented(statusCode: 500, .init())","    }","}"],"fileType":"swift","identifier":"3-apihandler.0.swift","fileName":"APIHandler.swift"},"3-apihandler.2.swift":{"type":"file","fileType":"swift","syntax":"swift","fileName":"APIHandler.swift","identifier":"3-apihandler.2.swift","highlights":[{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":31},{"line":32},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44}],"content":["import Fluent","import HTTPTypes","import Foundation","import OpenAPIRuntime","","struct APIHandler: APIProtocol {","    ","    var db: Database","    ","    func listTODOs(","        _ input: Operations.ListTODOs.Input","    ) async throws -> Operations.ListTODOs.Output {","        .undocumented(statusCode: 500, .init())","    }","","    func createTODO(","        _ input: Operations.CreateTODO.Input","    ) async throws -> Operations.CreateTODO.Output {","        switch input.body {","        case .json(let todo):","            \/\/ 1. Create new ID string using UUID","            let newId = UUID().uuidString","            let contents = todo.contents","","            \/\/ 2. Instantiate a new TODO object from the database with DB.TODO()","            \/\/    Populate the fields (id and contents)","            let dbTodo = DB.TODO()","            dbTodo.id = newId","            dbTodo.contents = contents","","            \/\/ 3. Save the value","            try await dbTodo.save(on: db)","","            return .created(","                .init(","                    body: .json(","                        .init(","                            id: newId,","                            contents: contents","                        )","                    )","                )","            )","        }","    }","","    func getTODODetail(","        _ input: Operations.GetTODODetail.Input","    ) async throws -> Operations.GetTODODetail.Output {","        .undocumented(statusCode: 500, .init())","    }","","    func deleteTODO(","        _ input: Operations.DeleteTODO.Input","    ) async throws -> Operations.DeleteTODO.Output {","        .undocumented(statusCode: 500, .init())","    }","}",""]},"3-database.2.swift":{"syntax":"swift","type":"file","fileName":"Database.swift","content":["import Fluent","import FluentPostgresDriver","import Foundation","import Vapor","","enum DB {","    final class TODO: Model, @unchecked Sendable {","        static let schema = \"todos\"","","        @ID(custom: \"id\", generatedBy: .user)","        var id: String?","","        @Field(key: \"contents\")","        var contents: String","    }","}"],"fileType":"swift","identifier":"3-database.2.swift","highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14}]},"doc://com.apple.ASE.getting-started/tutorials/GettingStartedSwiftServer/0-setup#Clone-and-build-the-tutorial-repository":{"type":"section","url":"\/tutorials\/gettingstartedswiftserver\/0-setup#Clone-and-build-the-tutorial-repository","abstract":[{"text":"Ensure you have the right tools and example code before learning how to write your Swift server application.","type":"text"}],"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/0-setup#Clone-and-build-the-tutorial-repository","title":"Clone and build the tutorial repository"},"3-database.1.swift":{"syntax":"swift","identifier":"3-database.1.swift","fileType":"swift","content":["import Fluent","import FluentPostgresDriver","import Foundation","import Vapor","","enum DB {","    final class TODO: Model, @unchecked Sendable {","        \/\/ Exercise: add in the database module","    }","}"],"fileName":"Database.swift","highlights":[{"line":7}],"type":"file"},"3-bash.0.txt":{"content":["% docker compose up postgres","[+] Running 2\/2"," ⠿ Network swiftservertodos_default       Created              0.1s"," ⠿ Container swiftservertodos-postgres-1  Created              0.1s","Attaching to swiftservertodos-postgres-1","..."],"fileType":"","type":"file","identifier":"3-bash.0.txt","fileName":"Terminal","highlights":[],"syntax":""},"3-bash-curl.2.txt":{"fileName":"Terminal 2","content":["% curl -i -X POST \\","-H \"Content-Type: application\/json\" \\","-d '{ \"contents\": \"my first todo\" }' \\","localhost:8080\/api\/todos","","HTTP\/1.1 201 Created","Content-Type: application\/json; charset=utf-8","content-length: 83","connection: keep-alive","date: Thu, 15 May 2025 04:59:34 GMT","","{","  \"contents\" : \"my first todo\",","  \"id\" : \"5A91C1AA-293C-4298-B725-01333BFF2544\"","}","","% curl localhost:8080\/api\/todos"],"identifier":"3-bash-curl.2.txt","type":"file","fileType":"","highlights":[{"line":16},{"line":17}],"syntax":""},"doc://com.apple.ASE.getting-started/tutorials/GettingStartedSwiftServer/0-setup":{"kind":"project","role":"project","estimatedTime":"5min","url":"\/tutorials\/gettingstartedswiftserver\/0-setup","type":"topic","title":"Set up your development environment","identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/0-setup","abstract":[{"type":"text","text":"Ensure you have the right tools and example code before learning how to write your Swift server application."}]},"doc://com.apple.ASE.getting-started/tutorials/GettingStartedSwiftServer/1-introduction":{"estimatedTime":"5min","title":"Introduction","role":"project","kind":"project","identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/1-introduction","type":"topic","abstract":[{"type":"text","text":"The tutorial example contains a Package.swift file that defines the dependencies and targets for the app, as well as a Sources directory with starter files. The finished tutorial is also provided in the Completed folder."}],"url":"\/tutorials\/gettingstartedswiftserver\/1-introduction"},"3-bash-swiftrun.0.txt":{"fileName":"Terminal 1","fileType":"","highlights":[],"content":[" % swift run SwiftServerTodos","Building for debugging...","[1\/1] Write swift-version--61257B8C62E73F86.txt","Build of product 'SwiftServerTodos' complete! (0.45s)","[ INFO ] [Migrator] Starting prepare [database-id: psql, migration: SwiftServerTodos.Migrations.CreateTODOs]","[ INFO ] [Migrator] Finished prepare [database-id: psql, migration: SwiftServerTodos.Migrations.CreateTODOs]","[ NOTICE ] Server started on http:\/\/0.0.0.0:8080"],"type":"file","identifier":"3-bash-swiftrun.0.txt","syntax":""},"doc://com.apple.ASE.getting-started/tutorials/getting-started-swift-server":{"kind":"overview","type":"topic","url":"\/tutorials\/getting-started-swift-server","abstract":[{"text":"Learn about cloud services in Swift by building and extending a Vapor app.","type":"text"}],"title":"Explore Swift on the server by building a Vapor app","role":"overview","identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/getting-started-swift-server"},"doc://com.apple.ASE.getting-started/tutorials/GettingStartedSwiftServer/3-database":{"abstract":[{"text":"Use the Fluent ORM to connect a PostgreSQL database to the tutorial app.","type":"text"}],"estimatedTime":"10min","type":"topic","identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/3-database","role":"project","title":"Integrate a database","url":"\/tutorials\/gettingstartedswiftserver\/3-database","kind":"project"},"3-bash-curl.3.txt":{"syntax":"","type":"file","highlights":[{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25}],"identifier":"3-bash-curl.3.txt","fileType":"","content":["% curl -i -X POST \\","-H \"Content-Type: application\/json\" \\","-d '{ \"contents\": \"my first todo\" }' \\","localhost:8080\/api\/todos","","HTTP\/1.1 201 Created","Content-Type: application\/json; charset=utf-8","content-length: 83","connection: keep-alive","date: Thu, 15 May 2025 04:59:34 GMT","","{","  \"contents\" : \"my first todo\",","  \"id\" : \"5A91C1AA-293C-4298-B725-01333BFF2544\"","}","","% curl localhost:8080\/api\/todos","{","  \"items\" : [","    {","      \"contents\" : \"my first todo\",","      \"id\" : \"5A91C1AA-293C-4298-B725-01333BFF2544\"","    }","  ]","}"],"fileName":"Terminal 2"},"3-serverservice.1.swift":{"highlights":[{"line":14}],"syntax":"swift","content":["import OpenAPIVapor","import ServiceLifecycle","import Vapor","","func configureServer(_ app: Application) async throws -> ServerService {","    app.middleware.use(RequestLoggerInjectionMiddleware())","","    \/\/ A health endpoint.","    app.get(\"health\") { _ in","        \"ok\\n\"","    }","","    \/\/ Create app state.","    let handler = APIHandler(db: app.db)","","    \/\/ Register the generated handlers.","    let transport = VaporTransport(routesBuilder: app)","    try handler.registerHandlers(","        on: transport,","        serverURL: Servers.Server1.url()","    )","","    return ServerService(app: app)","}","","struct ServerService: Service {","    var app: Application","    func run() async throws {","        try await app.execute()","    }","}"],"type":"file","fileName":"ServerService.swift","identifier":"3-serverservice.1.swift","fileType":"swift"},"3-database.3.swift":{"content":["import Fluent","import FluentPostgresDriver","import Foundation","import Vapor","","enum DB {","    final class TODO: Model, @unchecked Sendable {","        static let schema = \"todos\"","","        @ID(custom: \"id\", generatedBy: .user)","        var id: String?","","        @Field(key: \"contents\")","        var contents: String","    }","}","","enum Migrations {","    struct CreateTODOs: AsyncMigration {","        func prepare(on database: Database) async throws {","            \/\/ Exercise: add table creation logic","        }","        ","        func revert(on database: Database) async throws {","            \/\/ Exercise: add table deletion logic","        }","    }","}"],"highlights":[{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28}],"identifier":"3-database.3.swift","syntax":"swift","fileName":"Database.swift","type":"file","fileType":"swift"},"3-bash-curl.0.txt":{"content":["% curl -i -X POST \\","-H \"Content-Type: application\/json\" \\","-d '{ \"contents\": \"my first todo\" }' \\","localhost:8080\/api\/todos"],"fileType":"","type":"file","identifier":"3-bash-curl.0.txt","fileName":"Terminal 2","highlights":[],"syntax":""},"3-database.0.swift":{"fileName":"Database.swift","highlights":[{"line":1},{"line":2},{"line":6},{"line":7},{"line":8},{"line":9}],"identifier":"3-database.0.swift","content":["import Fluent","import FluentPostgresDriver","import Foundation","import Vapor","","enum DB {","    final class TODO {","        \/\/ Exercise: add in the database module","    }","}"],"fileType":"swift","syntax":"swift","type":"file"},"doc://com.apple.ASE.getting-started/tutorials/getting-started-swift-server/Review-and-next-steps":{"title":"Review and next steps","kind":"article","role":"article","identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/getting-started-swift-server\/Review-and-next-steps","type":"topic","url":"\/tutorials\/getting-started-swift-server\/review-and-next-steps","abstract":[]},"doc://com.apple.ASE.getting-started/tutorials/getting-started-swift-server/Build-a-basic-Vapor-app":{"identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/getting-started-swift-server\/Build-a-basic-Vapor-app","url":"\/tutorials\/getting-started-swift-server\/build-a-basic-vapor-app","abstract":[],"title":"Build a basic Vapor app","type":"topic","kind":"article","role":"article"},"doc://com.apple.ASE.getting-started/tutorials/GettingStartedSwiftServer/3-database#Run-and-test-the-code":{"url":"\/tutorials\/gettingstartedswiftserver\/3-database#Run-and-test-the-code","kind":"section","abstract":[{"text":"Use the Fluent ORM to connect a PostgreSQL database to the tutorial app.","type":"text"}],"identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/3-database#Run-and-test-the-code","type":"section","title":"Run and test the code","role":"pseudoSymbol"},"3-apihandler.1.swift":{"type":"file","highlights":[{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":55}],"fileName":"APIHandler.swift","content":["import Fluent","import HTTPTypes","import Foundation","import OpenAPIRuntime","","struct APIHandler: APIProtocol {","    ","    var db: Database","    ","    func listTODOs(","        _ input: Operations.ListTODOs.Input","    ) async throws -> Operations.ListTODOs.Output {","        .undocumented(statusCode: 500, .init())","    }","","    func createTODO(","        _ input: Operations.CreateTODO.Input","    ) async throws -> Operations.CreateTODO.Output {","        \/\/ Exercise:","        \/\/ 0. uncomment switch condition","        \/\/ switch input.body {","        \/\/ case .json(let todo):","","        \/\/ 1. Create new ID string using UUID","        \/\/ https:\/\/developer.apple.com\/documentation\/foundation\/uuid\/uuidstring","","        \/\/ 2. Instantiate a new TODO object from the database with DB.TODO().","        \/\/    Populate the fields (id and contents)","","        \/\/ 3. Save the value","        ","        \/\/ 4. Uncomment to return the response","        \/\/ return .created(.init(body: .json(.init(","        \/\/     id: newId,","        \/\/     contents: contents","        \/\/ ))))","        \/\/ }","","        \/\/ Exercise: Remove this after above logic is completed","        .undocumented(statusCode: 500, .init())","    }","","    func getTODODetail(","        _ input: Operations.GetTODODetail.Input","    ) async throws -> Operations.GetTODODetail.Output {","        .undocumented(statusCode: 500, .init())","    }","","    func deleteTODO(","        _ input: Operations.DeleteTODO.Input","    ) async throws -> Operations.DeleteTODO.Output {","        .undocumented(statusCode: 500, .init())","    }","}",""],"fileType":"swift","identifier":"3-apihandler.1.swift","syntax":"swift"},"3-database.7.swift":{"content":["import Fluent","import FluentPostgresDriver","import Foundation","import Vapor","","func configureDatabase(app: Application) async throws {","    let postgresURL = try getOptionalURLEnvVar(\"POSTGRES_URL\")","        ?? URL(string: \"postgres:\/\/postgres@localhost:5432\/postgres?sslmode=disable\")!","    try app.databases.use(.postgres(url: postgresURL), as: .psql)","","    app.migrations.add([","        Migrations.CreateTODOs()","    ])","    try await app.autoMigrate()","}","","enum DB {","    final class TODO: Model, @unchecked Sendable {","        static let schema = \"todos\"","","        @ID(custom: \"id\", generatedBy: .user)","        var id: String?","","        @Field(key: \"contents\")","        var contents: String","    }","}","","enum Migrations {","    struct CreateTODOs: AsyncMigration {","        func prepare(on database: Database) async throws {","            try await database.schema(DB.TODO.schema)","                .field(\"id\", .string, .identifier(auto: false))","                .field(\"contents\", .string, .required)","                .create()","        }","        ","        func revert(on database: Database) async throws {","            try await database","                .schema(DB.TODO.schema)","                .delete()","        }","    }","}"],"type":"file","highlights":[{"line":10},{"line":11},{"line":12},{"line":13},{"line":14}],"fileName":"Database.swift","identifier":"3-database.7.swift","fileType":"swift","syntax":"swift"},"3-database.5.swift":{"fileName":"Database.swift","syntax":"swift","highlights":[{"line":6},{"line":7},{"line":8},{"line":9}],"content":["import Fluent","import FluentPostgresDriver","import Foundation","import Vapor","","func configureDatabase(app: Application) async throws {","    \/\/ Exercise: configure the database connection","}","","enum DB {","    final class TODO: Model, @unchecked Sendable {","        static let schema = \"todos\"","","        @ID(custom: \"id\", generatedBy: .user)","        var id: String?","","        @Field(key: \"contents\")","        var contents: String","    }","}","","enum Migrations {","    struct CreateTODOs: AsyncMigration {","        func prepare(on database: Database) async throws {","            try await database.schema(DB.TODO.schema)","                .field(\"id\", .string, .identifier(auto: false))","                .field(\"contents\", .string, .required)","                .create()","        }","        ","        func revert(on database: Database) async throws {","            try await database","                .schema(DB.TODO.schema)","                .delete()","        }","    }","}"],"fileType":"swift","type":"file","identifier":"3-database.5.swift"},"3-bash-curl.1.txt":{"identifier":"3-bash-curl.1.txt","syntax":"","fileType":"","fileName":"Terminal 2","type":"file","content":["% curl -i -X POST \\","-H \"Content-Type: application\/json\" \\","-d '{ \"contents\": \"my first todo\" }' \\","localhost:8080\/api\/todos","","HTTP\/1.1 201 Created","Content-Type: application\/json; charset=utf-8","content-length: 83","connection: keep-alive","date: Thu, 15 May 2025 04:59:34 GMT","","{","  \"contents\" : \"my first todo\",","  \"id\" : \"5A91C1AA-293C-4298-B725-01333BFF2544\"","}"],"highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15}]},"doc://com.apple.ASE.getting-started/tutorials/GettingStartedSwiftServer/4-wrapup#Review":{"identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/4-wrapup#Review","title":"Review","url":"\/tutorials\/gettingstartedswiftserver\/4-wrapup#Review","type":"section","abstract":[{"type":"text","text":"Review what you built and where to find resources to build something you can ship to production."}],"role":"pseudoSymbol","kind":"section"},"doc://com.apple.ASE.getting-started/tutorials/GettingStartedSwiftServer/4-wrapup#Where-do-I-go-from-here":{"url":"\/tutorials\/gettingstartedswiftserver\/4-wrapup#Where-do-I-go-from-here","role":"pseudoSymbol","identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/4-wrapup#Where-do-I-go-from-here","abstract":[{"type":"text","text":"Review what you built and where to find resources to build something you can ship to production."}],"type":"section","title":"Where do I go from here?","kind":"section"},"doc://com.apple.ASE.getting-started/tutorials/GettingStartedSwiftServer/3-database#Add-the-database-layer-to-the-routes":{"type":"section","role":"pseudoSymbol","abstract":[{"text":"Use the Fluent ORM to connect a PostgreSQL database to the tutorial app.","type":"text"}],"title":"Add the database layer to the routes","url":"\/tutorials\/gettingstartedswiftserver\/3-database#Add-the-database-layer-to-the-routes","identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/3-database#Add-the-database-layer-to-the-routes","kind":"section"},"doc://com.apple.ASE.getting-started/tutorials/GettingStartedSwiftServer/2-openapi#OpenAPI-generator":{"identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/2-openapi#OpenAPI-generator","kind":"section","url":"\/tutorials\/gettingstartedswiftserver\/2-openapi#OpenAPI-generator","role":"pseudoSymbol","title":"OpenAPI generator","abstract":[{"text":"Learn how to add an OpenAPI document, generate server stubs using the OpenAPI plugin, and integrate the generated code into the app.","type":"text"}],"type":"section"},"doc://com.apple.ASE.getting-started/tutorials/GettingStartedSwiftServer/3-database#Configure-the-database-tables-and-connection":{"title":"Configure the database tables and connection","identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/3-database#Configure-the-database-tables-and-connection","url":"\/tutorials\/gettingstartedswiftserver\/3-database#Configure-the-database-tables-and-connection","type":"section","abstract":[{"type":"text","text":"Use the Fluent ORM to connect a PostgreSQL database to the tutorial app."}],"kind":"section","role":"pseudoSymbol"},"doc://com.apple.ASE.getting-started/tutorials/GettingStartedSwiftServer/3-database#Set-up-the-infrastructure":{"url":"\/tutorials\/gettingstartedswiftserver\/3-database#Set-up-the-infrastructure","abstract":[{"text":"Use the Fluent ORM to connect a PostgreSQL database to the tutorial app.","type":"text"}],"type":"section","identifier":"doc:\/\/com.apple.ASE.getting-started\/tutorials\/GettingStartedSwiftServer\/3-database#Set-up-the-infrastructure","kind":"section","role":"pseudoSymbol","title":"Set up the infrastructure"}}}